jan 8 2021



What is Version Control:

	Basically, we will talk about
		- version control primary goal
		- version control example
		- version control benefits



	VERSION CONTROL PRIMARY GOAL
		- version control is a system 
		- that records all changes and modifications to files for tracking purposes. 
		- there are different types of changes, such as 
		- adding new files, modifying or updating files, and deleting files.
		- developers also use the term source control or source code management. 

		- the primary goal of any version control system is to keep track of changes. 
		- it achieves this by allowing developers access to the entire change history 
		- with the ability to revert or roll back to a previous state or point in time. 

		- the version control system is the source of truth 
		- across all code, assets, and the team itself. 



	VERSION CONTROL EXAMPLE ( word processing application )
		- let me give you an example that we're all familiar with. 
		- in word processing applications, 
		- version control functionality is available 
		- to provide users with the safety net of auto-saving the document. 

		- the application creates a restoration point on each auto-save 
		- to which the user can revert if required. 
		- version control systems for coding projects tend to be a bit more complex, 
		- but their underlying functionality follows the same process. 





















What is Version Control:

	VERSION CONTROL BENEFITS
		- working as a developer, 
		- you need to become familiar with many different tools, 
		- and version control is one of them. 

		- for developers, especially those working in a team, 
		- there are many benefits associated with version control. these include; 
		- revision history, 
		- identity, 
		- collaboration, 
		- automation, and 
		- efficiency. 
		- let's explore these in some more detail. 



	VERSION CONTROL BENEFITS ( revision history )
		- revision history provides a record of all changes in a project. 
		- it provides developers with the ability 
		- to revert to a stable point in time 
		- in cases where code edits cause issues or bugs. 

		- the ability to roll back to a particular version or time 
		- allows teams to work faster and deliver code with more confidence.
























What is Version Control:

	VERSION CONTROL BENEFITS ( identity )
		- keeping a record of changes is great, 
		- but it doesn't have as much value 
		- if you don't know who is responsible for adding or changing a record. 

		- all changes made are always recorded 
		- with the identity of the user that made them. 
		- combining this feature with the revision history allows teams 
		- to see not only when the changes occurred, but also who made the changes. 



	VERSION CONTROL BENEFITS ( collaboration )
		- teams can also analyze the editing, creation, 
		- and the deletion of files on the control system. 

		- as a software developer, 
		- you will often work with a team to achieve a common goal. 
		- this can be adding new features to an existing project or creating a brand new service. 

		- in all cases, a version control system allows the team 
		- to submit their code and keep track of any changes that need to be made. 

























What is Version Control:

	VERSION CONTROL BENEFITS ( peer review )
		- another important aspect of a version control system is something called a PEER REVIEW. 
		- developers working on a task 
		- create a peer review once the code is ready for inspection. 

		- the peer review aims to get other developers on your team 
		- to review the code and provide feedback where necessary. 



	VERSION CONTROL BENEFITS ( devops )
		- version control plays an integral role 
		- in the explosion of development operations, 
		- or devops, as it's commonly called. 

		- devops is a set of practices, philosophies, and tools 
		- that increase an organization's ability 
		- to deliver applications or services to a high quality and velocity. 

		- version control is a key tool in this process, 
		- and it is used not only to track all changes 
		- but also to aid in software quality release and deployments. 
























What is Version Control:

	VERSION CONTROL BENEFITS ( agile methodologies )
		- you and your team need to be efficient to make your project a success. 
		- you and your team may work using processes from the agile methodology.

		- in an agile process, 
		- a team normally plan and execute two weeks of work to complete, 
		- what is called an iteration.

		- each iteration has a list of tasks to complete before the two weeks ends. 
		- these tasks, while complex in some cases, 
		- are aided by having version control in place. 

		- if you would like to learn more about the agile methodology, 
		- there is a link to an additional reading at the end of this lesson. 



	VERSION CONTROL END-NOTE
		- testing and having some level of automation on every task introduced 
		- allows the team to be more efficient. 
		- it also ensures more confidence that any new feature being introduced 
		- will not break any existing flows. 

















Systems of Version Control:	

	Basically, we will talk about
			- version control systems types: cvcs & dvcs
			  their operation, their advantages & disadvantages



	VERSION CONTROL SYSTEMS ( intro )
		- as a developer working in a team, 
		- you are continually writing, changing, 
		- or updating existing source code. 

		- it may happen that while you were working on a new feature, 
		- another developer in the team is busy fixing an unrelated bug. 

		- with multiple developers all working in the same code base, 
		- keeping track of all of those additional updates can be problematic. 
		- luckily, version control addresses these kinds of problems.



	VERSION CONTROL SYSTEMS ( examples )
		- there are many different version control systems available. 
		- for example, SUBVERSION, PERFORCE, AWS CODE COMMIT, MERCURIAL
		- AND GIT to name a few.

















Systems of Version Control:	

	VERSION CONTROL SYSTEMS ( types )
		- version control systems can be split into two types or categories. 
				* centralized version control systems (CVCS) and 
				* distributed version control systems (DVCS). 
		- both types are quite similar, 
		- but they also have some key differences 
		-which set them apart from each other. 



	VERSION CONTROL SYSTEMS ( cvcs - pull )
		- let's start with centralized version control systems, 
		- or cvcs for short, contain a server and a client. 
		- the server contains the main repository 
		- that houses the full history of versions of the code base. 

		- developers working on projects using a centralized system 
		- need to pull down the code from the server to their local machine. 
		- this gives the user their own working copy of the code base. 
		- the server holds the full history of changes. 

















Systems of Version Control:	

	VERSION CONTROL SYSTEMS ( cvcs - push )

		- the client has the latest code, 
		- but every operation needs to have a connection to the server itself. 
		- in a centralized version control system, 
		- the server is the central copy of the project. 

		- after making changes to the code, 
		- the developer needs to push the changes 
		- to the central server so that other developers can see them. 

		- this essentially means that viewing 
		- the history of changes requires that you are connected 
		- to the server in order to retrieve and view them. 



	VERSION CONTROL SYSTEMS ( cvcs - advantage ) 
		- the advantage of cvcs is that they are considered easier 
		- to learn than their distributed counterparts. 
		- they also give more access controls to users. 

		- the disadvantage is that they can be slower given that you need 
		- to establish a connection to the server to perform any actions. 

















Systems of Version Control:	


	VERSION CONTROL SYSTEMS ( dvcs )

		- now, let's discover how distributed version control systems work.  
		- they are similar to the centralized model. 
		- you still need to pull code down from the server to view the latest changes. 
		- the key difference is that every user 
		- is essentially a server and not a client. 

		- this means that every time you pull down code from the distributed model, 
		- you have the entire history of changes on your local system. 



	VERSION CONTROL SYSTEMS ( dvcs - advantage )
		- with dvcs, you don't need to be connected to the server 
		- to add your changes or view a file's history. 

		- it works as if you are actually connected to the server 
		- directly but on your own local machine. 
		- you only ever need to connect to the server 
		- to pull down the latest changes 
		- or to push your own changes. 
		- it essentially allows users to work in an offline state. 

		- speed and performance are also better than its cvcs counterpart. 
		- dvcs is a key factor in improving developer operations 
		- and the software development life cycle. 





















A history of version control: 

	Basically, we will talk about
			- the examples of version control system
			  how we moved from one type to another overtime.
			  the vcs used 1990 till the vcs used 2007


	VERSION CONTROL SYSTEMS EXAMPLE ( cvs - intro)
		- one of the first significant version control systems 
		- was the concurrent versions system (cvs). 
		- it was first developed in 1986 by walter f. tichy at purdue university 
		- and released publicly in 1990.



	VERSION CONTROL SYSTEMS EXAMPLE ( cvs - operation )
		- cvs stores information about every file in a folder structure, 
		- including the name of the file, 
		- its location in the folder structure, 
		- who last modified it, and 
		- when it was last modified. 
		- the cvs also stores information about folders, 
		- including their names and who created them. 





















A history of version control:

	VERSION CONTROL SYSTEMS EXAMPLE ( cvs - flaws )
		- it was popular for many years; 
		- however, it has some significant flaws in its design. 
		- cvs does not include integrity checks 
		- which means your data can become corrupted. 

		- when you update or submit changes to the system, 
		- if an error occurs, the system accepts the partial or corrupted files. 

		- additionally, the system was designed mainly for text files, 
		- not binary files such as images or videos.
		- the main successor to cvs was SUBVERSION (svn).



	VERSION CONTROL SYSTEMS EXAMPLE ( subversion )
		- collabnet developed subversion (svn) in 2000 
		- and solved many of the issues present in cvs. 

		- to ensure data integrity, it included integrity checks in its design. 
		- it also supported the versioning of binary files better than cvs. 

		- thanks to these improvements, 
		- svn became popular in the open-source community 
		- with free hosting being offered for open-source projects by google and sourceforge.

		- however, subversion used a centralized vcs model. 
		- this means that all operations have to be done using a centralized server. 
		- if the server were down or slow, this would impede development. 


























A history of version control:

	VERSION CONTROL SYSTEMS EXAMPLE ( bitkeeper )
		- in 2005, two new projects were started 
		- to develop distributed version control systems; MECURIAL and GIT. 
		- both projects were created in response 
		- to an event involving the linux kernel development.

		- previously, the linux kernel was using a proprietary vcs known as BITKEEPER. 
		- bitkeeper was one of the first distributed version control systems 
		- initially released in 2000. 

		- bitkeeper had originally provided 
		- a free license to linus torvalds to support linux’s development. 
		- however, in 2005, the license was revoked. 
		- this controversy led to the creation of the mercurial and git projects.




	VERSION CONTROL SYSTEMS EXAMPLE ( mecurial )
		- mercurial was developed by olivia mackal. 
		- it is developed as a high-performance distributed vcs. 

		- many platforms offering subversion hosting 
		- began to offer mercurial hosting too. 
		- it became popular as subversion users found it easy 
		- to transition to a mercurial repository, 
		- thanks to the hosting providers and its small learning curve. 


























A history of version control:

	VERSION CONTROL SYSTEMS EXAMPLE ( git )
		- git was developed by linus torvalds 
		- to host the linux kernel’s source code.
		- like mercurial, it is a distributed vcs. 
		- its first public release came in 2007.

		- git became popular in the open-source community 
		- due to its distributed vcs design and 

		- github offering free git hosting for open-source projects. 
		- git has since become the selected version control system 
		- for many open-source and proprietary software projects.

















Version control in professional software development: 

	Basically, we will explore
		- some common tools, procedures and strategies developers use
		  in conjunction with version control

		- workflow
		- continuous integration
		- continuous delivery
		- continuous deployment



	OTHER TOOLS & STRATEGIES ( intro )
		- version control plays a crucial part in software development. 
		- as a developer, you’ll work with other developers 
		- on projects to deliver software to customers. 

		- however, version control must be complemented 
		- by other tools and procedures to ensure quality and efficiency 
		- throughout the software development process. 

















Version control in professional software development: 

	OTHER TOOLS & STRATEGIES ( workflow - idea )
		- using version control without a proper workflow 
		- is like building a city without traffic lights; 
		- without appropriate management, 
		- everything will turn into chaos.

		- workflows are essential to ensure code is managed correctly 
		- and it reduces mistakes from happening.


	OTHER TOOLS & STRATEGIES ( workflow - example1 )
		- for example, 
		- let’s say you’re working on a big project and editing a file. 
		- another developer also starts editing a file. 
		- both of you submit the file to the vcs at the same time. 

		- now there’s a conflict! how should the conflict be resolved? 
		- a good workflow will have a process for resolving conflicts.

















Version control in professional software development: 


	OTHER TOOLS & STRATEGIES ( workflow - example1 )
		- another example is when a new junior developer is joining your team. 
		- if the project code is used for a critical system, 
		- it is risky to allow them to submit code changes directly. 

		- to solve this, many developers use a peer review system 
		- where another developer must review code before it can be merged in.


	OTHER TOOLS & STRATEGIES ( workflow - endnote )
		- workflows are essential to ensure code is managed correctly 
		- and it reduces mistakes from happening.

		- different projects will have different workflows. 
		- in this course, you’ll learn some common workflows 
		- using the git version control system.

















Version control in professional software development: 


	OTHER TOOLS & STRATEGIES ( continuous integration )
		- continuous integration, or ci, is used to automate 
		- the integration of code changes from multiple developers 
		- into a single main stream. 

		- using a workflow whereby small changes are merged frequently, 
		- often many times per day, will reduce the number of merge conflicts.
		- this process is widespread in test-driven software development strategies.

		- ci is often used to automatically compile the project 
		- and run tests on every code change 
		- to ensure that the build remains stable 
		- and prevent regressions in functionality.


	OTHER TOOLS & STRATEGIES ( continuous delivery )
		- continuous delivery is an extension of continuous integration. 
		- once the changes have been merged into the main stream, 

		- a continuous delivery system automatically 
		- packages the application and prepares it for deployment. 
		- this helps avoid human error when packaging the application.

















Version control in professional software development: 


	OTHER TOOLS & STRATEGIES ( continuous deployment )
		- continuous deployment is an extension of continuous delivery. 
		- the goal of continuous deployment is to deploy and release 
		- software to customers frequently and safely. 

		- the strategy commonly involves automatically 
		- deploying to a test (also known as staging) environment first 
		- to validate the deployment package and software changes. 

		- once validated, it can automatically 
		- deploy to the live (also known as production) environment for customers.


	OTHER TOOLS & STRATEGIES ( conclusion )
		- with these tools and procedures, 
		- it is possible to understand how software starts 
		- from a developer writing code 
		- to being deployed live for customers to use. 

		- of course, there is much more to running a live software service, 
		- but that is a lesson for another day.

























A history of revisions:

	Basically, we discuss how developers use version control 
	to fix any conflicts that may occur during production.



	REVISION HISTORY ( intro )
		- when working with a team of developers, 
		- it's essential for the codebase to have a source of truth that has all historical changes. 
		- this is critical when working with a team of developers

		- version control systems play an integral part in aiding this process 
		- by providing a full history of changes of every single file added to its repository. 
		- it makes collaboration across a team easier. 

		- it also aids in working toward a common goal. 
		- whether it is adding new features and following the flow of how they were implemented, 
		- or discovering where a potential issue may have been introduced. 
		- being able to accurately pinpoint the WHO, the WHEN, and the WHAT of those changes is paramount. 

























A history of revisions:


	REVISION HISTORY ( changes documentation standards )
		- the revision history will record the essential data points 
		- so any developer or team member can walk through the entire project from start to its current state. 
		- every change that has occurred on the project should be easily accessible 
		- either by a simple command or integration into the developer's ide. 

		- it's important for organizations to define standards 
		- for how developers communicate changes they make. 
		- developers need to know prior to looking at the code, 
		- what the lead developers' aims are. the more information the better. 

		- this creates a stronger team environment that is more transparent and open. 

























A history of revisions:


	REVISION HISTORY ( benefits - life cycle )
		- when working on a single project, 
		- there's usually some level of crossover between the developers. 
		- when this does occur, the history of revisions can help aid the developers 
		- in seeing the FULL LIFE CYCLE OF CHANGES that have occurred. 



	REVISION HISTORY ( benefits - merging conflicts )
		- it is also essential for MERGING CONFLICTS 
		- where multiple developers have made changes 
		- that may need to be resolved prior to the code being approved. 

		- the history will show 
		- who made the change, 
		- for what reason, the code itself and its changes, and 
		- the date and time of when they occurred. 

		- typically on a new project, 
		- you will encounter changes in one task 
		- that may cause potential issues or conflicts with another. 
		- the history of revisions will give the team the ability 
		- to manage and merge these changes and deliver the business objectives in a timely manner. 

























Staging vs. Production:


	Basically we want to talk about two environments used in development
		- staging enviroment
		- production environment



	INTRO
		- every development team prior to releasing their new features or changes
		- needs to verify that the code they do release is not going to cause any issues or bugs. 

		- in order to achieve this, 
		- they normally set up multiple environments for different ways to test and verify.  

		- a common practice is for teams to have a developer environment, 
		- a UAT or QA environment, and a staging environment. 

		- the main purpose of this flow is to find any potential issues 
		- that may arise due to changes or new features being added to the codebase. 
		- the more ways to test the changes the less likely bugs will be introduced. 

























Staging vs. Production:


	STAGING ENVIRONMENT
		- the staging environment should mimic your production environment. 
		- the reason for this is because you want to test the code 
		- in an environment that matches what you have in production. 
		- this allows teams to spot or find any potential issues prior to them getting to production. 

		- staging environments can also be used for testing and verifying new features 
		- and allow other teams including QA or STAKEHOLDERS 
		- to see and use those features as a pre-trial. 

		- staging should also cover all areas of the architecture of the application 
		- including the database and any other services that may be required. 

		- areas that benefit from staging environments include:
		- new features
		- testing
		- migrations
		- configuration changes



	STAGING ENVIRONMENT ( benefits - New Features )
		- developers submitting new features along with feature flags 
		- for turning them on and off should always do a testing round in a staging environment. 

		- they allow teams to verify that the feature works, 
		- it can be turned on and off via configuration flags and also 
		- that it does not break or interfere with existing functionality.

























Staging vs. Production:

	STAGING ENVIRONMENT ( benefits - Testing )
		- as the staging environment mimics your production environment, 
		- it's also a great place to run tests. 

		- QA teams will normally use it to verify 
		- new features, configuration changes or software updates/patching. 

		- The types of testing covered will be 
		- UNIT TESTING, INTEGRATION TESTING, PERFORMANCE TESTING. 



	STAGING ENVIRONMENT ( benefits - Testing )
		- we can also just do the testing in production enviroment
		- all except performance testing can also be carried out in production enviroment. 
		- performance can also be completed in production but only at specific times
		- usually out of hours as it will have a drastic effect on the user experience.

		- sometimes it is not always feasible 
		- to have an exact replication (staging) either due to costs or time. 
		- unfortunately, there are some things that are too risky to do in production environment

		- a way out is that certain areas can be cut back - for example, 
		- if your service is load balanced on 10 virtual machines in production, 
		- you could still have 4 virtual machines in staging. 
		- the underlying architecture is the same but the overall performance may be different.

























Staging vs. Production:

	STAGING ENVIRONMENT ( benefits - migrations )
		- staging is a perfect place to test and verify data migrations. 
		- snapshots can be taken from production and used to test your migration scripts 
		- to confirm your changes will not break anything. 

		- if in the case it does cause an issue, 
		- you simply rollback and try again. 
		- doing something like a migration in production environment is extremely risky and error-prone.



	STAGING ENVIRONMENT ( benefits - configuration changes )
		- configuration can also cause headaches for teams, 
		- especially in a large cloud-based architecture. 
		- having a staging environment will allow you 
		- to spot any potential issues or bottlenecks.

























Staging vs. Production:

	PRODUCTION ENVIRONMENT
		- production is live. It's out there for people to see and/or interact with. 
		- any issues or problems you may have had 
		- should have been caught and fixed in the staging environment. 

		- the staging area gives the team a safety net to catch these possible issues.
		- any code that is deployed to production 
		- should have been tested and verified before the deployment itself. 


	PRODUCTION ENVIRONMENT ( downtime )
		- downtime for any service especially customer facing will most likely be revenue impacting. 
		- if customers can not access or use your website or app to its full capabilities, 
		- it will most likely have a cost involved. 

		- take for example an e-commerce company 
		- that allows users to buy goods and services online. 
		- if they release a new feature to their shopping cart 
		- which actually breaks the payment process, 
		- this will have an impact on customers not being able to buy goods online. 

























Staging vs. Production:

	PRODUCTION ENVIRONMENT ( vulnerabilities )
		- cyber-security should also play a big role in what gets released in production. 
		- any updates to software such as patching 
		- or moving to the latest version should be checked and verified. 
		- this is also the same rule for not upgrading software when critical updates are released.



	PRODUCTION ENVIRONMENT ( reputation )
		- downtime or issues in production is damaging for a company 
		- as it does not instill confidence in end users. 

		- if something is down or broken 
		- it can cause the company to lose potential customers. 
















Module Summary:
 
	You learned to describe how modern software teams collaborate and work on the same code base, 
	list different version control systems, 
	explain different version control methodologies, and
	explored software development workflows when we talked about cvcs & dvcs. 



	You learned about the history of version control and 
	that it has been in use before the internet was widely adopted. 
	You explored conflict resolution, and discovered 
	the important role of version control in the software development process (revision history). 



	You learned about some of the common tools and strategies
	developers used to implement version control 
	such as workflow, continuous integration, continuous delivery and continuous deployment. 



	The differences between staging and production were explored and 
	you learned that the staging environment should mimic your production environment. 
	You also learned the many areas that benefit from creating a staging environment, 
	including new features, testing, migrations and configuration changes. 
	You learned that any issues should be caught and fixed in the staging environment before going live in production. 
	You have also explored downtime, vulnerabilities and reputation regarding production. 
	You should now be familiar with version control. Well done. You're making good progress on your learning journey





































Readings_1: About Version Control:

	About Version Control
		- what is “version control”, and why should you care? 
		- version control is a system that records changes to a file 
		- or set of files over time so that you can recall specific versions later. 

		- if you are a graphic or web designer 
		- and want to keep every version of an image or layout 
		- a Version Control System (VCS) is a very wise thing to use. 

		- it allows you to revert selected files back to a previous state,
		- compare changes over time, 
		- see who last modified something that might be causing a problem, 
		- who introduced an issue and when, and more. 
		- basically it aids recoverywith little overhead



	Local Version Control Systems ( the need )
		- many people’s version-control method of choice 
		- is to copy files into another directory 
		- (perhaps a time-stamped directory, if they’re clever). 

		- this approach is very common because it is so simple, 
		- but it is also incredibly error prone. 
		- it is easy to forget which directory you’re in 
		- and accidentally write to the wrong file 
		- or copy over files you don’t mean to. 



	Local Version Control Systems ( the idea )
		- to deal with this issue, programmers long ago developed local VCSs 
		- that had a simple database that kept all the changes to files under revision control.

			IMAGE: Local version control diagram
			Figure 1. Local version control

		- one of the most popular VCS tools was a system called RCS, 
		- which is still distributed with many computers today. 
		- RCS works by keeping patch sets (that is, the differences between files) in a special format on disk; 
		- it can then re-create what any file looked like 
		- at any point in time by adding up all the patches.



	Centralized Version Control Systems ( the need )
		- the next major issue that people encounter 
		- is that they need to collaborate with developers on other systems. 
		- to deal with this problem, Centralized Version Control Systems (CVCSs) were developed. 



	Centralized Version Control Systems ( the idea )
		- these systems (such as CVS, Subversion, and Perforce) 
		- have a single server that contains all the versioned files, 
		- and a number of clients that check out files from that central place. 
		- for many years, this has been the standard for version control.
			image: Centralized version control diagram
			Figure 2. Centralized version control



	Centralized Version Control Systems ( benefit over local vcs
		- this setup offers many advantages, especially over local VCSs. 
		- For example, everyone knows to a certain degree what everyone else on the project is doing. 
		- administrators have fine-grained control over who can do what, 
		- and it’s far easier to administer a CVCS 
		- than it is to deal with local databases on every client.



	Centralized Version Control Systems disadvantage
		- however, this setup also has some serious downsides. 
		- the most obvious is the single point of failure 
		- that the centralized server represents. 

		- Local VCSs suffer from this same problem
		- whenever you have the entire history of the project in a single place, 
		- you risk losing everything.



	Distributed Version Control Systems ( the idea )
		- this is where Distributed Version Control Systems (DVCSs) step in. 
		- in a DVCS (such as Git, Mercurial, Bazaar or Darcs), 
		- clients don’t just check out the latest snapshot of the files; 

		- rather, they fully mirror the repository, including its full history. 
		- thus, if any server dies, and these systems were collaborating via that server, 
		- any of the client repositories can be copied back up to the server to restore it. 
		- every clone is really a full backup of all the data.

			Distributed version control diagram
			Figure 3. Distributed version control



	Distributed Version Control Systems ( great advantage )
		- furthermore, many of these systems deal pretty well 
		- with having several remote repositories they can work with, 

		- so you can collaborate with different groups of people 
		- in different ways simultaneously within the same project. 

		- this allows you to set up several types of workflows 
		- that aren’t possible in centralized systems, such as hierarchical models.