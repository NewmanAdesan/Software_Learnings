


Video and Audio:

	INTRO
		- how do you, as a developer, add videos and audio to a webpage? 
		- html video and audio tags are used for embedding media on a webpage 

		- both tags support different file types 
		- that can be played in the web browser
		- video tags support: .mp4, .webm, .ogg
		- audio tags support: .mp3, .wav, .ogg, .aac


	VIDEO ( source tag attributes )
		- you start with a video tag itself. 
		- add a source element into the tag. 
		- the source element has no closing tag. 
		- add two attributes, "src", also known as source, and "type". 

		- "src" specifies the address of the video file. 
		- "type" specifies the type of the file like "video/mp4"

		- the video tag allows for multiple sources to be specified. 
		- thus multiple file types of a video can be specified as a fallback
		- the web browser will check through the sources
		- in order and use the first one that it supports. 
























Video and Audio:

	VIDEO ( video tag attributes )
		- there are also attributes available for the video tag itself, 
		- which allow you to customize the video player. 

		- "width" and "height" attibute of the player.
		- "controls" attribute to enable player controls 
		- "muted" attribute to mute audio of video 



	VIDEO ( simple example )
		<video width="280" height="280" controls>
			<source src="dance.mp4" type="video/mp4">
			<source src="dance.ogg" type="video/ogg">
		</video>

		-


	AUDIO ( simple example )
		- this works very similar to the video tag
		- "loop" attribute plays audio in a loop
		<audio loop controls>
			<source src="music.ogg" type="audio/ogg">
			<source src="music.mp3" type="audio/mpeg">
		</audio>

		- text can be placed in btw the audio tags
		- they would appear in the event that the browser 
		- viewing the web page did not support the audio element.

		- "autoplay"
		- "loop"  loops the audio over and over again
		- "muted"  mutes the audio on initial load
		- "preload"
























Iframe:

	IFRAME ( intro )
		- an iframe is an inline HTML element that allows you 
		- to place or embed content from another website into a webpage. 
		- defined using the iframe html tag. 

		- it embeds another browsing instance inside the page. 
		- what this means is that it runs the embedded webpage, 
		- similar to how a webpage runs in another tab of your web browser. 
		- it's runs the HTML, CSS, and JavaScript of the embedded webpage. 

		- it is often used to display adverts, 
		- but it can also be used to embed content 
		- from another website, such as a social media post.

		<iframe src="www.example.com" width="200" height="1 50"></iframe>


	IFRAME ( security issue )
		- while iframe is very useful. 
		- it security has been a concern since its inception 
		- because it's vulnerable to malicious code and injection. 
		- as previously mentioned, a webpage can run javaScript code. 

		- it's important to ensure that you trust 
		- the website you're embedding into your own. 

		- fortunately, there are some attributes 
		- that can be applied to limit the behavior of the iframe.
























Iframe:

	IFRAME ( security attribute - allow )
		- "allow" attribute, 
		- limits which browser features the iframe can access. 

		- there are many possible values 
		- that can be set on the allow attribute. 

		- for now, let's examine how to disable 
		- camera and microphone access in an iframe. On your iframe element, 

		<iframe
			src="www.example.com"
			allow="camera 'none'; microphone 'none'"
			>
		</iframe>


	IFRAME ( security attribute - sandbox )
		- "sandbox" attribute. 
		- similar to the allow attribute, 
		- there are many values that can be set. 

		- it limits behavior within the iframe, such as 
		- preventing files from being downloaded 
		- and preventing pop-up windows. 

		- For now, the important thing to note 
		- is that when the sandbox attribute is used with an empty value, 
		- all sandbox restrictions will apply to the iframe. 
		- individual sandbox restrictions can be removed by adding attributes. 

		- for example, if you want to allow file downloads in the iframe, 
		- you would allow the allow-downloads value. 
		<iframe src="..." sandbox="allow-downloads"></iframe>


	IFRAME ( end-note )
		- while these restrictions help to keep your users secure, 
		- there may still be security vulnerabilities 
		- in your web browser that the embedded web page can exploit. 

		- therefore, it's always best to be cautious 
		- when using iframes and ensure that you trust the website that you are embedding.

		- keep in mind that the iframe element 
		- can be used for a lot more than embedding 
		- a media hosted at another site.
		- check the iframe documentation page to learn more
























Iframe:

	IFRAME ATTRIBUTES CHEAT SHEET ( sandbox ):
		- "allow-downloads" Allows the user to download an item 
		- "allow-forms" Allows the user to submit forms 
		- "allow-modals" The resource can open modal windows 
		- "allow-orientation-lock" Lets the resource lock the screen orientation 
		- "allow-popups" Allows popups to open 
		- "allow-presentation" Allows a presentation session to start 
		- "allow-scripts" Lets the resource run scripts without creating popup windows 


	IFRAME ATTRIBUTES CHEAT SHEET ( srcdoc ):
		- let's you specify the inline HTML to embed in the <iframe> element.
		- when defined, this attribute will override the src attribute
		- <iframe src="my_iframe_src.html" srcdoc="<p>My inline html</p>" ></iframe>


	IFRAME ATTRIBUTES CHEAT SHEET ( loading ):
		- let's you specify if the iframe 
		- should be loaded immediately when the web page loads (eager) or 
		- loaded when iframe is displayed in the browser (lazy). 

		- this allows you to defer loading iframe content 
		- if it is further down your web page and 
		- outside of the display area when the page is initially loaded.

		- <iframe src="my_iframe_src.html" loading="lazy"></iframe>
























Iframe:

	IFRAME ATTRIBUTES CHEAT SHEET ( referrerpolicy ):
		- a referrer is the HTTP header 
		- that lets the page know who is loading it. 

		- this attribute indicates which referrer information 
		- to send when loading the frame resource. 

		- the common values are: 
		- "no-referrer" the referrer header will not be sent. 
		- "origin" the referrer will be limited to the origin of the referring page 

		- "strict-origin" the origin of the document 
		- is sent as the referrer only when using 
		- the same protocol security level (HTTPS to HTTPS) 


	IFRAME ATTRIBUTES CHEAT SHEET ( allow ):
		- specifies what features or permissions 
		- are available to the frame, for instance, 
		- access to the microphone, camera, other APIs and so on
		- semicolon-separator should be used between features

		- allow="fullscreen” the fullscreen mode can be activated 
		- allow=“geolocation” lets you access the user’s location 


	IFRAME ATTRIBUTES CHEAT SHEET ( others )
		- name, height, width, title, src 
























Canvas Element:

	CANVAS ( graphics programming intro )
		- graphics programming in the web browser	
		- are underpinned by one of four technologies 
		- GIF, WEBP, 2D CANVAS and WEBGL. 


	CANVAS ( gif )
		- the GIF (graphics interchange format) 
		- along with the webp image format are used for animated images. 
		- an image using this format has no interactivity, 
		- but it's popular for embedding animated content 
		- and for building 2D video games and animations


	CANVAS ( 2D canvas )
		- 2D CANVAS allows 2D graphics to be drawn in the web browser. 
		- it's popular for building 2D video games and animations. 
		- the logic and behavior of an animation or video game 
		- is defined using javascript. 

	CANVAS ( webgl )
		- WEBGL is a popular technology 
		- for building 2D and 3D animations and advanced graphics. 
		- the benefit of webgl is that a dedicated chip 
		- in your device called a graphics processing unit? or gpu 
		- does the calculations when graphics are rendered to the screen. 

		- this allows for complex calculations 
		- such as lighting, simulation and rendering massive 3D worlds. 

		- it is important to note that 
		- while webgl will always use the gpu, 
		- it's not guaranteed that the 2D canvas will use the gpu. 
		- this will depend on the web browser implementation. 

		- webgl is a complex technology and requires 
		- a lot of background information so for now 
		- let's focus on the canvas element.

	CANVAS ( animation example ):
		- a ball moving from the left end of the canvas
		- down to the other end of the canvas

		<!DOCTYPE html>
		<html>
		  <body>

		    <canvas id="myCanvas" width="640" height="480" style="border:1px solid #000000;">
		    Your browser does not support the HTML canvas tag.
		    </canvas>

		    <script>
		            const canvas = document.getElementById("myCanvas");
		            const ctx = canvas.getContext("2d");

		     let speed = 4;
		     let move_speed = speed;
		     let position = 0;
		     let radius = 40;


		     function moveball(){


		        // to move backward position decreases by 4 (-speed)
		        // moving backward starts at the end of the canvas (640)
		        if (position + radius > 640){
		            movespeed = -speed;
		        }

		        // to move forward position increases by 4 (+speed)
		        // moving forward starts at the beginning of the canvas (0)
		        else if (position - radius < 0) {
		            movespeed = speed
		        }

		        position += movespeed;

		     }


		     function drawball(){
		        ctx.clearRect(0, 0, 640, 480);

		        ctx.fillStyle="#62687f";
		        ctx.beginPath();
		        ctx.arc(position, 50, radius, 0, 2*Math.PI);
		        ctx.fill();
		     }

		     function animate(){
		        moveball();
		        drawball();
		        window.requestAnimationFrame(animate);
		     }

		     window.requestAnimationFrame(animate);
		    </script>

		  </body>
		</html>
























Additionals - Track element:
	
	TRACK ELEMENT
		- the track element can be added 
		- as a child to any audio or video element 
		- to link a timed text file to the media content

		- the file linked with the track element 
		- must be formatted in WebVTT format i.e (.vtt)

		- quite often more than one track file 
		- is added to a video or audio element 
		- to provide captions or subtitles in multiple languages


	TRACK ELEMENT ( attributes )
		- "kind" attribute is used to specify 
		- what type of data is contained in the attached file. 
		- with values 'subtitles', 'captions', 
		- 'descriptions', 'chapters', and 'metadata'

		- other attributes are "label", "src", "srclang"
























Additionals - video/audio VS iframe:

	VIDEO/AUDIO vs IFRAME ( concept )
		- audio and video HTML5 elements are a great help
		- when the content is hosted on your server.
		- but if the content is hosted on another server
		- like youtube or vimeo or spotify

		- it is better to use there media hosting service
		- and embed them in your webpage using the iframe element
		- because they have optimized media playback in a way that
		- provides better performance than the native HTML5 element.



	VIDEO/AUDIO vs IFRAME ( example )
		- for example youtube has created a video player 
		- that employs HTML5 by default, 
		- includes a flash-based fallback for unsupported browsers, 
		- adjusts the video quality based on the viewers connection speed, 
		- and provides for buffering and smooth streaming.

		- to get an embed code for a YouTube video, 
		- simply navigate to the video you want to embed, 
		- open the contextual menu (right-click on a PC, or Ctrl and click on a Mac)
		- and select “Copy embed code”. 
		- when you do this, code that looks like 
		- what you see below will be copied to your clipboard.

			<iframe width="854" height="480" 
			  src="https://www.youtube.com/embed/M7lc1UVf-VE" 
			  frameborder="0" allowfullscreen>
			</iframe>


	VIDEO/AUDIO vs IFRAME ( end-note )
		- if you want to add media content from a website 
		- like YouTube, SoundCloud, Spotify, The Internet Archive, 
		- Vimeo, or any other leading provider of streaming media, 
		- you should first determine if the provider 
		- offers an easy way to embed their native media player. 

		- youTube has fully embraced the use of iframes to embed content
		- spotify is another service that uses iframes to embed media content 

			<iframe 
				src="https://embed.spotify.com/?uri=spotify%3Atrack%3A4Jzhluc2ZWHgA8ijEMP1HJ" width="300" 
				height="380" 
				frameborder="0" 
				allowtransparency="true">
			</iframe>
























Additionals - Media Plug-In:

	- as it is now, plug-ins will soon be deprecated
	- as audio, video, iframe elements which html5 provides are taking over

	- therefore, using plugins to deliver media content
	- is no longer necessary for visitors using a mocern browser
	- but many websites still offer a flash-based fallback 
	- for visitors using very old browsers.

	- Adobe Flash and Quicktime are two browser plugin technologies 
	- that were popular in the past and are still used 
	- to power media content on the web, 
	- including playback of audio and video.

	- we use either <object> or <embed> element
	- to add them to our webpages