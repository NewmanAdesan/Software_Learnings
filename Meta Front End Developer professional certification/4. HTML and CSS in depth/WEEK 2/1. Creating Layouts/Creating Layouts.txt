


Css Web Layout:
	
	CSS WEB LAYOUT ( intro )
		- layout is one of the most important components 
		- of designing a good web page 
		- because layouts help divide a page 
		- into different sections, thus making the page more presentable.

		- css capability has grown 
		- to allow several layout option
		- such as boxes, flex boxes, grids


	CSS WEB LAYOUT ( css mental model )
		- CSS can be used to enhance a web page by modifying 
		- FONTS, COLORS, LAYOUT, SIZE and
		- other style formatting options 
		- that make the web page more presentable. 

		- the browser window that is visible 
		- to the user on the screen is called the VIEWPORT. 

		- the idea behind any CSS web layout 
		- is to create an optimally designed web page 
		- that has a good viewport at any given point. 




























Css Web Layout:

	CSS WEB LAYOUT ( display property - box )
		- the display property specifies 
		- the type of box that you want to use 
		- for a given html element. 

		- it determines if a rendered boxes 
		- is an inline or block box models, 


	CSS WEB LAYOUT ( display property - flex vs grid )
		- block type are good but evolving requirements 
		- led to the development of CSS web layouts 
		- such as flex box and grid

		- they added more FLEXIBILITY and DIMENSIONALITY 
		- with better options for fine tuning 
		- specific sections of a web page. 

		- the main difference between the two is that 
		- flex box is one dimensional while 
		- grid is two dimensional.


























Css Web Layout:

	CSS WEB LAYOUT ( flexbox overview )
		- flex box is short for flexible box model
		- enabled with a display property with value "flex".

		- flex box adds responsiveness to CSS 
		- with FLOAT ELEMENTS and POSITIONING 

		- flex box is one dimensional 
		- this refers to the fact that 
		- a given flex box container 
		- will arrange items in either a column 
		- or a row along its axis. 

		- the flex box container applied over an element 
		- can flex to shrink or expand. 
		- thus resulting in a flexible responsive design. 


	CSS WEB LAYOUT ( grid overview )
		- css grid creates a two dimensional grid 
		- along both the row and column axes. 
		- enable with the display property set to "grid"

		- while the grid increases dimensionality 
		- and helps to create an advanced layout with relative ease. 
		- it can also lead to increased complications later. 
		- if the element rules are not systematically defined, 

		- there is no strict rule on choosing which layout to use, 
		- but in general flex boxes are more suitable 
		- when you want to create flexible elements in smaller spaces 
		- while grids are more suitable to large scale layouts. 


























CSS units of measurement:

	ABSOLUTE UNITS

		Q   Quarter-millimeters   1Q = 1/40th of 1cm

		mm   Millimeters   1mm = 1/10th of 1cm

		cm  Centimeters   1cm = 37.8px = 25.2/64in

		in  Inches   1in = 2.54cm = 96px

		pc  Picas    1pc = 1/6th of 1in

		pt  Points   1pt = 1/72nd of 1in

		px  Pixels   1px = 1/96th of 1in



	RELATIVE UNITS
		em  Font size of the parent where present.

		rem  Font size of the root element.

		vw  1% of the viewport width.

		vh  1% of the viewport height.

		vmin  1% of the smaller dimension of viewport.

		vmax  1% of the larger dimension of viewport.

		lh  Value computed for line height of parent element. 

		rlh  Value computed for line height of root element which is <html>. 

		ex  x-co-ordinate or height of the font element.

		ch  Width of the font character.

		%  Denotes a percentage value in relation to its parent element. 





























Flexbox:

	FLEXBOX PROPERTIES ( intro )
		- a flex box has two axis "main-axis" & "cross-axis"
		- by default "main-axis" is the x-axis (row)
		- and "cross-axis" is the y-axis (column)

		- the properties you choose will help better 
		- control alignment, spacing, direction and 
		- eventually styling of the container and items present inside it. 


	FLEXBOX PROPERTIES ( allignment properties )
		- there are four main properties used to align 
		- a flex container and items present inside it:  

		- JUSTIFY-CONTENT: for item alignment on main axis.
		- flex-start | flex-end | center | space-between | space-around
		- basically this guy distributes extra spaces in the container

		- ALIGN-ITEMS: for item alignment on cross axis.
		- flex-start | flex-end | center | baseline | stretch
		- (up and down when the direction is row, 
		- left and right if the direction is column)

		- ALIGN-SELF: for unique flex items on cross axis.

		- ALIGN-CONTENT. Used for packing flex lines and control over space.
























Flexbox:


	FLEXBOX PROPERTIES ( allignment properties )
		- GAP: this property can be used
		- to exactly set the gap size between flex items
		- you can also individually configure the gaps 
		- in rows and columns using 
		- row-gap and column-gap properties. 


		- ORDER: this property changes the order of the flex item
		- this only happens visually, it does not change the order
		- in the html document thus wont affect assitive technology
		- it operates similarly to "z-index"


	FLEXBOX PROPERTIES ( allignment properties )
		- FLEX (flex-grow, flex-shrink, flex-basis)
		- very handy for responsivity, 
		- applied to the items of a flex container
		- and not to the flex container itself.

		- flex-grow: factor of flex’s main size  
			enables the flex container to grow proportionally 
			to the other containers present. 

		- flex-shrink: factor of flex’s main size
			allows elements to shrink in relation to items around it.

		- flex-basis: auto | factor of main’s size | measurement unit
			sets the initial main size of an item. 
			it can be overridden if other stylized elements are configured. 

		- it is advised to use the flex property to control the three property
		- flex: flex-grow flex-shrink flex-basis 
		- you can use min-height & min-width property
		- to control how much it shrinks and how much it grows
		- without this specification, it would shrink as much as it contents



























Flexbox:

	EXAMPLE ( search bar )
		<div id="container">
			<img class="icon" src="icons8-search.svg">
			<input class="searchBox" type="search" name="search" placeholder="Enter text here..">
			<input class="searchButton" type="button" name="search" value="Search">
		</div>

		<style type="text/css">
			
			#container {
				display: inline-flex;
				border: 1px solid #ccc;
				flex: 1 1 300px;
				border-radius: 10px;
			}

			.icon {
				padding: 0.8rem;
			}

			.searchBox {
				border: none;
			}

			.searchButton {
				color: white;
				background: #0f4a8a;
				border: 0;
				border-radius: 8px;
				padding: 0.8rem;
			}
		</style>



























Flexbox:

	EXAMPLE ( navigation menu )
		<div id="container">
			<li><a href="#">Home</a></li>
			<li><a href="#">Culinary Blog</a></li>
			<li><a href="#">Menu</a></li>
			<li><a href="#">Contact Us</a></li>
		</div>

		<style type="text/css"> 

			* {
				margin: 0;
				padding: 0;
			} /* this removes any browser specific setting on elements */
			#container {
				background-color: #2b2d42;
				display: flex;
				flex-flow: row wrap;
			}
			#container li {
				list-style-type: none;
			}
			#container a {
				display: inline-block;
				padding: 25px;
				margin: 0 25px;
				text-align: center;
				text-decoration: none;
				color: #ffffff;
			}
			#container a:hover {
				background-color: lightsteelblue;
			} 
			

		</style>



























Flex Chart:

	FLEX CHART ( intro )
		- there are sophisticated data visualization tools 
		- available today that support web pages 
		- but it's fairly straightforward to integrate data using CSS. 

		- CSS provides a straightforward way to do this by using flex box, 
		- with flex boxes, you can generate both 
		- vertical and horizontal bar charts. 
		- these bar charts are called flex charts.


	FLEX CHART ( flex property )
		- the most important property for this functionality
		- is the flex property that in turn has 
		- the following three sub properties. 

		- flex-grow
		- specifies how much the item will grow compared to other flexible items

		- flex-shrink
		- specifies how much the item will shrink compared to other flexible items. 

		- flex-basis 
		- specifies the initial length of the flexible item. 
		- width for a row orientation, height for a column orientation

		- flex property can be declared with a shorthand notation
		- "flex: flex-grow flex-shrink flex-basis" 
		- "flex: 0 1 auto"



























Flex Chart:

	FLEX CHART ( example 1 )
		<div id="container">
			<div class="row">
				<div class="label">Preferred dishes</div>
				<div class="container">
					<div class="dish pasta" style="flex-basis:35%">35%</div>
					<div class="dish pizza" style="flex-basis:50%">50%</div>
					<div class="dish burrito" style="flex-basis:15%">15%</div>
				</div>
				
			</div>
		</div>

		<style type="text/css">
			.row {
				display: flex;
				align-items: stretch;
				border: 2px solid black;
			}

			.row .label {
				flex: 0 0 auto;
				font-family: Verdana, Geneva, Tahoma;
			}

			.row .container {
				flex: 1;
				display: flex;
				border: 2px solid black;
				justify-content: flex-start;
			}
			.row .dish {
				display: flex;
				justify-content: center;
				align-content: center;
			}

			.pasta {
				background-color: #EE9972;
			}

			.pizza {
				background-color: #F4CE14;
			}

			.burrito {
				background-color: #495E57;
			}
		</style>



























Flex Chart:

	FLEX CHART ( example 2 )
		<div class="columns">
			<div class="container">
				<div class="bar male" style="flex-basis: 25%"></div>
				<div class="bar female" style="flex-basis: 20%"></div>
			</div>
			<div class="container">
				<div class="bar male" style="flex-basis: 45%"></div>
				<div class="bar female" style="flex-basis: 40%"></div>
			</div>
			<div class="container">
				<div class="bar male" style="flex-basis: 15%"></div>
				<div class="bar  female" style="flex-basis: 50%"></div>
			</div>
			<div class="container">
				<div class="bar male" style="flex-basis: 5%"></div>
				<div class="bar female" style="flex-basis: 60%"></div>
			</div>
		</div>

		<style type="text/css">

			.columns {
				height: 400px;
				max-width: 300px;
				border: 1px solid rgb(0, 0, 0);

				display: flex;
				align-items: stretch;
			}

			.container {
				flex: 1;

				display: flex;
				flex-direction: column;
				align-items: stretch;
				justify-content: flex-end;
			}

			.bar {
				border-right: 1px solid white;
			}

			.male {
				background: #F4CE14;
			}

			.female {
				background: #495E57;
			}

		</style>



























Grid:

	GRID (intro)
		- two dimensional design layout that are responsive 
		- and compatible with browser variations.

		- an alternative to other options such as flexboxes and tables
		- especially when working with larger scale layout

		- grid columns: the vertical tracks
		- grid rows: the horizontal tracks
		- grid gutters/gaps: the space between the tracks
		- grid lines: the horizontal and vertical dividing lines
		- grid cell: space bordered by four adjacent grid lines

		- each grid lines and grid cells can be labelled
		- by default each grid line have a number
		- (1 to 4) for each row & column line 
		- (-1 to 4 ) when counting backward like the way indexing works
		- aside this, you can give each grid line & cell a generic name
		- for better design. more on this later


	GRID ( example )

		<div class="container">
			<div class="box a">A</div>
			<div class="box b">B</div>
			<div class="box c">C</div>
			<div class="box d">D</div>
			<div class="box e">E</div> 

		<style>

			/* better visual design for the alphabel box*/
			body {
				margin: 20px
			}

			.box {
				background-color: #247;
				color: #fff;
				margin: 10px;
				padding: 15px;
				border-radius: 10px;
				font-size: 150%;
			}

			.container {

				background-color: # 

				/* set up grid framework */
				display: grid;
				gird-template-columns: 100px 100px 100px;
				grid-template-rows: 2fr 1fr;
				grid-gap: 10px

			}

		</style>



























Grid:

	GRID ( example explanation )
		Row/Column Specification
		  - display property to grid gives the container a grid context
		  - grid-template-columns sets the number & width of columns
		  - grid-template-rows sets the number & width of rows
		  - grid-gap sets the spacing between grid items (rows & columns)

		Fractional Value
		  - the use of fr(fraction). 
		  - fraction effectively divides the grid. 
		  - where applied, the grid tracks are divided proportionately 
		  - to the ratio of all the fraction values present. 

		  - it represents a fraction 
		  - of the remaining space in the grid container.

		  - fraction adds flexibility to the grid 
		  - without needing to deal with actual pixel sizes. 
		  - fraction and pixel sizes can be used interchangeably 


	GRID ( example explanation )
		Fractional Value
		  - the grid stretches by default the entire width of the page
		  - thus making the fractions value to divided and compute ratio 
		  - on what ever space that is remaining

		  - the height will take as much space as the content in it
		  - thus 1fr will be the space the item will take based on it's content
		  - and 2fr will be double that space.

		  - my point is that the way fractionation works 
		  - on row specification and column specification is quite different



























Grid:

	GRID ( example explanation )
		Automatic Track Addition
		  - if we have more grid items
		  - than can be contained in our specified grid framework
		  - e.g 7 grid item in a 3x3 grid framework

		  - an implicit behaviour of grid
		  - is the creation of row and column tracks on the fly 
		  - to accommodate items that don’t fit in the defined grid

		  - in this case the size of the implicit track will be auto
		  - that is sized just large enough to accommodate its contents.

		  - we can specify the size to be used for implicit row or columns
		  - via the "grid-auto-rows" & "grid-auto-columns" property


		Grid Functions
		  - repeat()
		  - grid-template-columns: 5px 20px 1fr 20px 1fr 20px 1fr 20px 1fr 5px;
		  - grid-template-columns: 5px repeat(4, 20px 1fr)
		  - it's basically just a syntactic sugar
		  - passes the number of repeats required 
		  - for a given number of rows and columns

		  - minmax()
		  - sets the minimum and maximum values 
		  - expected for the sizes of rows and columns
		  - grid-template-columns: 200px minmax(15em, 45em) 200px;



























Grid:


	GRID ( design layout )
	  - there are a number of commonly used grid frameworks and layouts. 
	  - two such grid design layouts are known as 
	  - the 12 and 16-column grids. 

	  - they divide the page into 12 and 16 tracks respectively, 
	  - along the vertical columns. 
	  - the properties can be modified accordingly 
	  - to target a specific track.


	GRID ( 12 track design example )
		<div class="parent">
			<div class="segment twelve">Span 12</div>
			<div class="segment eight">Span 8</div>
			<div class="segment four">Span 4</div>
			<div class="segment six">Span 6</div>
			<div class="segment seven">Span 7</div>
			<div class="segment twelve">Span 12</div>
		</div>

		<style>

			.parent {
				display: grid;
				grid-template-columns: repeat(12, 1fr);
			}

			.segment {
				display: grid;
				grid-template-rows: 100px;
				text-align: center;
				place-items: center;
			}

			.twelve {
				background-color: lightseagreen;
				grid-column: 1 / span 12;
			}

			.eight {
				background-color: bisque;
				grid-column: 5 / span 8;

			}

			.four {
				background-color: lightblue;
				grid-column: 1 / span 4;

			}

			.six {
				background-color: lightsteelblue;
				grid-column: 5 / span 6;

			}

			.seven{
				background-color: lightcoral;
				grid-column: 3 / span 7;

			}

		</style>



























Grid:

	GRID ( a simple example )
		<body>
			<header>Little Lemon</header>
			<main>Menu</main>
			<footer>About Us</footer>
		</body>

		<style>

			body {
				display: grid;
				height: 150vh; /* 150% of the viewport height*/
				grid-template-rows: auto 1fr auto;

				/* 
				   notice the height setting
				   makes the (1fr) fractional functionality shine.
				   remember our previous talk on fractional value
				*/
			}

			header, main, footer {
				text-align: center;
				padding: 2em;
			}

			header {
				background-color: #2C3333;
			}

			main {
				background-color: #395B64;
			}

			footer {
				background-color: #A5C9CA;

			}

		</style>



























Grid Area & Grid Line:

	GRID AREA & LINE ( concept )
		- grid areas are a way to group one or more grid cells. 
		- the "grid-template-area" allows you specigy names 
		- to each grid cell and when you give a set of cells
		- the same grid naming you create a grid area.

		- do not the area must be in a rectangular shape
		- not any other shape like an L shape.

		- you can name each grid line and grid cell
		- and use this names to position grid items unto the grid
		- via the "grid-area", "grid-{row|column}-{start|end}"
		- and "grid-{row|column}" properties


	GRID AREA & LINE ( example )

		<body>
			<header>Header</header>
			<nav class="nav-bar">Navigation</nav>
			<main>Main area</main>
			<footer>Footer</footer>
		</body>

		<style>
			body {
				display: grid;
				height: 200px;
				grid-template-rows: 30px 1fr 30px;
				grid-template-columns: 150px 1fr;

				grid-template-areas: "head head"
									 "nav main"
									 "footer footer";
			}

			header {
				grid-area: head;
				background-color: lightsalmon;
			}

			nav-bar {
				grid-area:nav;
				background-color: lightblue;

			}
		</style>



























Grid Area & Grid Line:

	GRID AREA & LINE ( end-note )
		- grid-areas are convenient when you have 
		- a clear schematic of what you want in a grid. 

		- it’s also easier to configure individual areas 
		- if you can address them by their names. 

		- say you are designing a resume on your website, 
		- you will be able to name the different areas 
		- such as ‘Bio’, ‘Education’, ‘Work experience’ and so on. 

		- and it’s easier to use these labels 
		- when you are defining the rules. 


	GRID AREA & LINE ( end-note 2 )
		- how exactly do you use these names and 
		- where do they come from? 

		- the names that you use inside the grid template areas 
		- are the HTML tags that you have used. 

		- or, where you need to get more specific, 
		- you designate a class name to these tags




























Grid Cheatsheet:

	GRID CHEADTSHEET ( grid framework )
		- grid-template-rows: 
			configure your elements so that 
			they are organized similarly to rows on a table. 

		- grid-template-columns: 
			configure your elements 
			but with this setting the elements 
			are organized like columns on a table. 

		- grid-template-areas: 
			configure the names of a grid and how they sit 
			in relation to one another. 

		- grid-column-gap, grid-row-gap, grid-gap:
			this sets the gap between the columns and/or rows


	GRID CHEADTSHEET ( automatic tracks )
		- grid-auto-rows: 
			default setting for all row sizes 
			that have not been explicitly configured. 

		- grid-auto-columns: 
			default setting for all column sizes 
			that have not been explicitly configured. 

		- grid-auto-flow:
			default location for rows 
			that are not explicitly allocated. 



























Grid Cheatsheet:

	GRID CHEADTSHEET ( item positioning )
		- grid-column: column position /* E.g. 1/2  */
			allows for specifying where on the grid 
			the column is to start and end. 

		- grid-column-start: column start position 
			determines the starting column position an item is placed on a grid. 

		- grid-column-end: column end position 
			determines the end column position an item is placed on a grid. 

		- grid-row: row position /* E.g. 1/2  */
			where on the grid the row is to start and end. 

		- grid-row-start: row start position 
			determines the starting row position an item is placed on a grid. 

		- grid-row-end: row end position 
			determines the end row position an item is placed on a grid. 



























Grid Cheatsheet:

	GRID CHEADTSHEET ( alignment )
		- justify-items, justify-self: 
			start | center | end | stretch
			defines the default space that is allot to each item on the grid 

		- align-items, align-self: 
			start | center | end | stretch
			defines the default space related to an item along the grid’s block axis  

		- place-items, place-self:
			start | stretch /* shorthand for two properties above */
			this feature allows you align items with the block and inline directions.

		- justify-content: 
			start | center | end | stretch | space-between | space-evenly | space-around
			defines browser allocation of space to content items 
			in relation to the main-axis 

		- align-content: 
			start | center | end | stretch | space-between | space-evenly | space-around
			defines browser allocation of space to content items 
			in relation to cross axis and block axis  

		- place-content: 
			center | start
			this feature allows you align items 
			with the block and inline directions.



























Additionals :

    GRID FRAMEWORK
        - grid-template-row, gird-template-column
            (height of each rows & width of each columns)
            (grid lines naming)
            (grid unit of measurement - fr, min-content, max-content, auto, minmax())
            (grid value repetition - repeat(), auto-fill, auto-fit)
            (min-content, max-content, auto - content-based sizing)

            (line with multiple names)
            grid-template-rows: 
            					[header-start] 100px 
            					[header-end content-start] 400px  /* two names */
            					[footer-start] 100px
            					[footer-end]; 

			grid-template-columns: 
								[ads] 200px 
								[main] minmax(15em, 45em) 
								[links] max-content;


			(names in multiple lines)
			(though when render they would be uniquely identified)
			(by their occurence number i.e row-start, row-start 2, row-start 3 ...)
			grid-template-rows: repeat(3, [row-start] 1fr [row-end]);
			grid-template-columns: repeat(3, [col-start] 1fr [col-end]);


        - grid-template-areas
             grid area naming
             grid-template-areas: 
								 "header header header"
								 "ads main links"
								 "footer footer footer";


        - grid: grid-template-row / grid-template-column
            (grid shorthand property)


    GRID POSITIONING
        - grid-row-{start|end}, grid-column-{start|end}
            (position grid item by grid line number or line name)
            (position grid item by specifying number of cell to span)

            grid-row-start: 1;
		    grid-row-end: span 1;
		    grid-column-start: 1;
		    grid-column-end: -1;


        - grid-row: start / end, grid-column: start /end
            (shorthand to position grid item by line/span)
            grid-row: 2 / span 3;
			grid-column: span 2;

        - grid-area
            (position grid item by area name)
            grid-area: "header"

        - grid-area: row-start / column-start / row-end / column-end
            (position grid item by line number or span)
            grid-area: 2 / 2 / 3 / 3


    GRID IMPLICIT BEHAVIOUR
        - without explicit placement instructions, 
          grid items flow into the grid sequentially

        - creating a named area implicitly 
        - if the grid lines around that area is the same name
        - with the “-start” and “-end” suffixes

        - creation of row and column tracks on the fly 
        - to accommodate items that don’t fit in the defined grid
        - by default their size will be "auto"
        - you can change this via the 
        - "grid-auto-row" & "grid-auto-column" property

        - named grid areas will implicitly name 
          the grid lines along the edges of the area. 
          those grid lines will be named based on the area name 
          and suffixed with -start or -end.


    GRID IMPLICIT TRACKS
        - grid-auto-rows, grid-auto-columns
          explicitly created a 2x2 grid layout
          placed a grid item at (3,5)

          my explicit grid isn’t big enough to accommodate it, 
          so tracks get added according to the sizes 
          i provided in the grid-auto-* properties

          if no value provided in those properties,
          the default value will be auto (i.e as much as content)

        - grid-auto-flow
          specify whether you’d like items 
          to flow in by row or column
          values: row or column | dense (optional)

          {check textbook for more infor on dense functionality}
          {learning web design textbook}


    GRID ALLIGNMENT
        - grid-gap, grid-row-gap, grid-column-gap
          (spaces in-between row tracks and column tracks)

        - justify-items, align-items
          (aligns all the items in the inline-axis & block-axis respctively)

        - justify-self, align-self
          (alignment for individual items in the grid)
          (overides the "*-items" properties)

        - justify-content, align-content
          this has to do with aligning tracks in the grid container.
          there may be instances in which the tracks 
          of your grid do not fill the entire area 
          of their grid container.

          you can decide how the browser 
          should handle leftover space 
          within the container by using the 
          justify-content (horizontal/inline axis) and 
          align-content (vertical/block axis) properties. 

        - place-items, place-self, 
          specifies allignment for the items in the grid cell
          for both the block axis and the inline axis


    GRID MARGIN
        - you can add margins to a grid item
        - the item’s margin box will be anchored 
        - to the cell or grid area, 
        - and the margin space is preserved.

        - you can use margins to move the item around in the grid area
        - left margin to “auto” pushes the item to the right
        - left and right margins to “auto” 
          (as long as item has a specified width) 
          centers it horizontally
        - top and bottom margins to “auto” 
          and, as long as there’s a specified height, 
          it centers vertically

        - OFCOURSE YOU HAVE GRID ALIGNMENT PROPERTIES 
        - TO ACHIEVE THIS AS WELL



























Additionals :

	LAYERING GRID ITEMS
		- by default, item 2 would sit on top of item 1; 
		- however, we’ve created stacking context 
		- by assigning z-index: 1 to item 1, 
		- resulting it to sit on top of item 2.

			.item-1, .item-2 {
				grid-row-start: 1;
				grid-column-end: span 2;
			}

			.item-1 { grid-column-start: 1; z-index: 1; }
			.item-2 { grid-column-start: 2 }


	  	- a grid item is positioned and layered on top 
	  	- using implicit grid line names from the defined grid-template-areas.
			.overlay {
				grid-row-start:    header-start;
				grid-row-end:      content-end;
				grid-column-start: content-start;
				grid-column-end:   sidebar-start;
				z-index: 1;
			}
