



USAGE:

	$ python tournament.py 2018m.csv
		Belgium: 20.9% chance of winning
		Brazil: 20.3% chance of winning
		Portugal: 14.5% chance of winning
		Spain: 13.6% chance of winning
		Switzerland: 10.5% chance of winning
		Argentina: 6.5% chance of winning
		England: 3.7% chance of winning
		France: 3.3% chance of winning
		Denmark: 2.2% chance of winning
		Croatia: 2.0% chance of winning
		Colombia: 1.8% chance of winning
		Sweden: 0.5% chance of winning
		Uruguay: 0.1% chance of winning
		Mexico: 0.1% chance of winning



















Background (game-rounds & fifa-rating):


	Game rounds
		- in soccer’s World Cup, 
		- the "knockout round" consists of 16 teams. 
		- in "each round", each team plays another team 
		- and the losing teams are eliminated. 

		- when only two teams remain, 
		- the winner of the final match is the champion.



	Fifa ratings
		- in soccer,
		- teams are given FIFA Ratings, which are numerical values r
		- representing each team’s relative skill level. 
		- higher FIFA ratings indicate better previous game results, 

		- given two teams’ FIFA ratings, 
		- it’s possible to estimate the probability 
		- that either team wins a game based on their current ratings. 



















Background ( data base):

	The FIFA Ratings from just before the two previous World Cups 
	are available as the May 2018 Men’s FIFA Ratings 
	and March 2019 Women’s FIFA Ratings.


	using this information, we can simulate the entire tournament 
	by repeatedly simulating rounds until we’re left with just one team. 


	And 
		- if we want to estimate how likely it is 
		- that any given team wins the tournament, 
		- we might simulate the tournament many times (e.g. 1000 simulations) 
		- and count how many times each team wins a simulated tournament.
		-your task in this lab is to do just that using Python!		



















Starter files ( csv files ):

	Start by taking a look at the 2018m.csv file. 


	File description 
		- this file contains the 16 teams 
		- in the knockout round of the 2018 Men’s World Cup 
		- and the ratings for each team. 

		- notice that the CSV file has two columns, 
		- one called team (representing the team’s country name) 
		- and one called rating (representing the team’s rating).



	File Order
		- the order in which the teams are listed 
		- determines which teams will play each other in each round 

		- in the first round,  
		- Uruguay will play Portugal and France will play Argentina; 

		- in the next round, 
		- the winner of the Uruguay-Portugal match 
		- will play the winner of the France-Argentina match. 

		- so be sure not to edit the order in which teams appear in this file!



	Data representation	
		- ultimately, in Python, 
		- we can represent each team as a dictionary that contains two values: 
		- the team name and the rating. Uruguay, for example, 
		- we would want to represent in Python as {"team": "Uruguay", "rating": 976}.


	Next, take a look at 2019w.csv, which contains 
	data formatted the same way for the 2019 Women’s World Cup.



















Starter files (tournament.py file):

	Now, open tournament.py and see 
	that we’ve already written some code for you. 


	tournament.py is divided into Four basic sections
		- variable N
		- simulate_game function
		- simulate_round function
		- simulate_tournament function
		- main function 



















Starter files (tournament.py file):

	variable N
		- the variable N at the top represents 
		- how many World Cup simulations to run: in this case, 1000.



	The simulate_game function 
		- accepts two teams as inputs 
		- recall that each team is a dictionary 
		- containing the team name and the team’s rating.

		- this function accepts them as inputs
		- and simulates a game between them. 

		- if the first team wins, the function returns True; 
		- otherwise, the function returns False.




	The simulate_round function 
		- accepts a list of teams (in a variable called teams) as input, 
		- and simulates games between each pair of teams. 
		- it returns a list of all of the teams that won the round. 



















Starter files ( tournament.py file ):

	In the main function, this function is divided into four sections
		command line arguments
		teams list structure
		tracking counts structure
		teams winning report


	Command line arguments	
		- notice that we first ensure that len(sys.argv) 
		- (the number of command-line arguments) is 2. 
		- we’ll use command-line arguments to tell Python 
		- which team CSV file to use to run the tournament simulation. 


	Teams list structure
		- We’ve then defined a list called "teams" 
		- (which will eventually be a list of teams) 


	tracking counts structure
		- We've also defined a dictionary called "counts" 
		- which will associate team names with the number of times 
		- that team won a simulated tournament. 

		- Right now they’re both empty, so populating them is left up to you!


	teams winning report
		- Finally, at the end of main, we sort the teams in descending order 
		- of how many times they won simulations (according to counts) 
		- and print the estimated probability that each team wins the World Cup.


	Populating teams and counts 
	and writing the simulate_tournament function are left up to you!		



















Implementation ( first move ):

	Complete the implementation of tournament.py, 
		- such that it simulates a number of tournaments 
		- and outputs each team’s probability of winning.



	Firstly
		- in main function, you have two jobs
			read the csv file into memory
			obtain each team data structure	

		- read the team data from the CSV file into your program’s memory, 
		- and add each team to the list teams. meaning 
		- add each dictionary structure (team) into the list structure (teams)



	First Job (reading file )
		- the file to use will be provided as a command-line argument. 
		- You can access the name of the file with sys.argv[1].
		- you can open a file with open(filename), 
		- where filename is a variable storing the name of the file.



	Second Job (obtain team data)
		- Once you have a file f, 
		- you can use csv.DictReader(f) to give you a “reader”: 
		- an object in Python that you can loop over to read the file one row at a time, 
		- treating each row as a dictionary.

		- By default, all values read from the file will be strings. 
		- So be sure to first convert the team’s rating to an int 
		- (you can use the int function in Python to do this).

		- append each team’s dictionary to teams. 
		- the function call teams.append(x) will append x to the list teams.

		- recall that each team should be a dictionary with a team name and a rating.



















Implementation ( second move ):

	Secondly, implement the simulate_tournament function. 


	simulate_tournament function
		- this function should accept as input a list of teams 
		- and should repeatedly simulate rounds until you’re left with one team. 
		- the function should then return the name of that team.

		- you can call the simulate_round function, 
		- which simulates a single round, 
		- accepting a list of teams as input 
		- and returning a list of all of the winners.

		- recall that if x is a list, 
		- you can use len(x) to determine the length of the list.
		- you should not assume the number of teams in the tournament, 
		- but you may assume it will be a power of 2.	



















Implementation ( last move ):

	Finally, back in the main function, 
		- run N tournament simulations, 
		- keep track of how many times each team wins 
		- in the counts dictionary.


	For example, 
		- if Uruguay won 2 tournaments,
		- Portugal won 3 tournaments, 
		- then your counts dictionary should be {"Uruguay": 2, "Portugal": 3}.


	You should use your simulate_tournament 
	to simulate each tournament and determine the winner.


	Syntax recall
		- recall that if counts is a dictionary, 
		- then syntax like counts[team_name] = x 
		- will associate the key stored in team_name 
		- with the value stored in x.

		- you can use the "in" keyword in Python 
		- to check if a dictionary has a particular key already. 

		- For example, if "Portugal" in counts: 
		- will check to see if "Portugal" 
		- already has an existing value in the counts dictionary.
