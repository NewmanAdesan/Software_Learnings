

Let's understand the mental model around working with routes, (web application)



* At a simplistic level, you can think of routes as connoting a functionality. 
  that is, to need a route is to express a functionality that interacts with some kind of data storage
  on the server, like a database, a file, a programs data structure e.t.c


* Two Basic aspect to think about a route
	WHAT DOES IT GIVE BACK IF ANY?
	WHAT PROCESSING DOES IT CARRY OUT IF ANY? 


* There is an hierarchy to understanding all the routes for an app.
  such that one route links to another like a tree structure.
  we start understanding from the root route, then we move from there down the tree



* What do we mean to understand a route
	   WHAT DOES ROUTE GIVE BACK IF ANY?
     WHAT PROCESSES DOES THE ROUTE UNDERGO & WHY?
     DOES THIS ROUTE LINK TO OTHER ROUTE IF SO, WHY, HOW?
     BRIEFLY SUMMARIZE THE LOGIC








SIMPLE LOGIN APP 
  - let's understand the whole application, 
  - looking at the mental model for this application
  - let's start from the root and move from there, down the tree




SIMPLE LOGIN APP ( default route - "/" ):

What does it give
  - basically it gives the homepage of the site, "index.html"

IS THERE ANY PROCESS ATTACHED
  - yes, there is a process attached

WHY THE PROCESS & HOW THE PROCESS
  - you see, not everybody should be able to see this index.html
  - only those according to our system that are logged

  - therefore we are going to divide access 
  - to the route into two sections
  - access via user we know (logged in before)
  - access via user we do not know (never logged in) 



  - the question now is HOW DO WE OBTAIN THIS KNOWLEDGE?
  - because the server will receive a default URL irrespective of the person.

  - this is where SESSION comes in, such that we use cookies to know
  - if the user has used the browser to log in or not.
  - we could implement the sessioning from scratch by ourselves
  - but to save development time, we would use flask sessioning implementation
  - such that flask stores all the cookies assigned to a user in the server
  - flask can do this in various ways based on the setting
  - e.g using database system, using server OS enviroment variable, using file system e.t.c

  - for this project, we will order flask to store it using file system
  - this way, flask stores each cookie as a file in "flask_session/"
  - inside each file is a global variable named "session" which is implemented as 
  - a key/value data structure. we can use this to store information 
  - about the user. e.g the name of the user e.t.c (session["name"])

  - thus, what basically happens is that 
  - once flask receives the url, it checks the cookie that comes with it
  - it then checks the cookie if it has a file for the cookie
  - if it does not the session global variable will an empty data structure,{}
  - if it does the session global variable will be used to access data of the user

  - the question is how do we achieve this knowledge? 
  - brief answer is flask implementation of sessioning gives us this knowledge



  - the next question is 
  - WHAT HAPPENS WHEN WE DO NOT KNOW THE USER?
  - WHAT HAPPENS WHEN WE DO KNOW THE USER?



  - what happens when we do not know the user.
  - well we need to know the user, 
  - that is we need to obtain information from the user
  - that in essense means we will need to the user to submit a form
  - a form in this context is what we call a login form

  - therefore we need to give the user a login page
  - which contains a form that collects user information
  - we would then use this information to know the user
  - giving the user a cookie, starting a session with the user.
  - again flask takes care of giving the cookie and creating the file for the user

  - because of better design this responsibility would be for another route
  - meaning we would redirect user to another route "/login"
  - we would understand login next, it's actually basic 
  - first, let's wrap up the understanding of this default route


  - what happens when we do know the user.
  - we now want to send the user, the "index.html" page
  - it would be basic, simply telling the user he is logged in
  - "You are logged in as {session["name"]}". {logout}

  - notice the user can now log-out.
  - we can implement this log-out as a button
  - which submits a form to another route "/log-out"
  - which basically log-out the user either by {session["log-out"] = True}
  - or we can make {session["name"] = None} 
  - since when the user logs in we can set the name key 
  - then we can send the user an html page that says
  - "You are logged out. {log-in-link}"
  - this log-in-link can href the route "/log-in"

  

  - hmmm... in this case, when we say we know the user, 
  - we mean that the user has logged in before
  - therefore we have two scenario here
  - IS THE USER STILL LOGGED IN or
  - HAS THE USER LOGGED OUT

  - we can have a flag in the user session global variable,
  - so we can know if the user is logged in


